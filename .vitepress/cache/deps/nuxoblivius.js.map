{
  "version": 3,
  "sources": ["../../../node_modules/nuxoblivius/dist/ts/Utils.js", "../../../node_modules/nuxoblivius/dist/ts/config.js", "../../../node_modules/nuxoblivius/dist/ts/Record.js", "../../../node_modules/nuxoblivius/dist/ts/index.js", "../../../node_modules/nuxoblivius/index.js"],
  "sourcesContent": ["import { isRef as isVueRef, isReactive } from \"vue\";\nexport function toRefRaw(object) {\n    const raw = object.value ?? undefined;\n    if (typeof raw === 'undefined')\n        throw new Error('raw is empty');\n    const proto = Object.getPrototypeOf(raw);\n    proto.raw = () => object;\n    return raw;\n}\nexport async function resolveOrLater(data, callback) {\n    if (data instanceof Promise)\n        return data.then((value) => {\n            callback(value);\n        });\n    callback(data);\n}\nexport function refOrVar(value) {\n    if (!value)\n        return value;\n    if (typeof value == 'function') {\n        value = value();\n    }\n    if (value == null) {\n        return null;\n    }\n    if (isRef(value) || isVueRef(value) || value?.__v_isRef) {\n        return value.value;\n    }\n    return value;\n}\nexport function isRef(value) {\n    return typeof value == 'object' && '_module_' in value;\n}\n/**\n * Correct converting object to query-params Object\n */\nexport function storeToQuery(object) {\n    const unpacked = object.value;\n    if (typeof unpacked != \"object\") { // object SHOULD BE object\n        return {}; // return empty object\n    }\n    const result = {}; // init object\n    for (const [name] of Object.entries(unpacked)) {\n        if (name.length == 0)\n            continue;\n        if (name[0] != '_') {\n            const value = unpacked[name];\n            result[name] = value;\n        }\n    }\n    for (const [name, _] of Object.entries(Object.getOwnPropertyDescriptors(unpacked))) {\n        if (name.length == 0)\n            continue;\n        if (name[0] != '_') {\n            const value = unpacked[name];\n            if (typeof value != \"undefined\" && typeof value != \"object\" && typeof value != \"function\") {\n                if (value != null) {\n                    result[name] = value;\n                }\n            }\n        }\n    }\n    return result;\n}\nexport function urlPathParams(url, params) {\n    Object.entries(params)\n        .map(([param, value]) => {\n        value = value ?? '';\n        url = url.replaceAll(`{${param}}`, typeof value !== \"number\"\n            ? (value ? value : \"\")\n            : value);\n    });\n    return url;\n}\nexport function queryToUrl(query) {\n    let flatObject = {};\n    const flat = (objectToFlat, prefix = '', suffix = '') => Object.entries(objectToFlat)\n        .map(([name, value]) => typeof value == 'object' && (!isRef(value) && !isVueRef(value))\n        ? flat(value, `${prefix + name + suffix}[`, ']')\n        : flatObject[`${prefix + name + suffix}`] = refOrVar(value));\n    flat(query);\n    if (Object.keys(flatObject).length == 0)\n        return ``;\n    return `?${(new URLSearchParams(flatObject)).toString()}`;\n}\nexport function appendMerge(...objects) {\n    const result = {};\n    const recursive = (value, to) => {\n        for (const [nameRec, valueRec] of Object.entries(value)) {\n            if (valueRec == null)\n                continue;\n            if (typeof valueRec == 'object' && !isRef(valueRec) && !isVueRef(valueRec) && !isReactive(valueRec)) {\n                if (!(nameRec in to))\n                    to[nameRec] = {};\n                recursive(to[nameRec], valueRec);\n            }\n            else {\n                to[nameRec] = valueRec;\n            }\n        }\n    };\n    for (const local of objects) {\n        recursive(local, result);\n    }\n    return result;\n}\n", "export const defaultHeaders = {};\nexport let defaultFetchFailure = () => undefined;\nexport const options = {\n    /**\n     * HTTP request configuration\n     */\n    http: async (url, options, isblob) => {\n        let response = await fetch(url, options); // standart fetch\n        let _meta = {\n            ok: response.ok,\n            code: response.status,\n            text: response.statusText,\n        };\n        if (!response.ok) {\n            return {\n                _meta,\n                header: response.headers,\n                body: {\n                    _errorCode: response.status,\n                    _errorText: response.statusText,\n                    _errorBody: await response.text()\n                }\n            };\n        }\n        if (isblob) // for blob data\n            return { header: response.headers, body: response.blob(), _meta };\n        const raw = await response.text();\n        if (raw.length > 0 && (raw[0] == '{' || raw[0] == '[')) {\n            return { header: response.headers, body: JSON.parse(raw), _meta };\n        }\n        return { header: response.headers, body: raw, _meta }; // this function returns RAW DATA (before template using)\n    },\n    cookie: { get: (name) => '', set: (name, value) => null },\n    router: {},\n    _templates: {}, // incapsulated templates\n    get templates() { return this._templates; }\n};\nexport function setRequestFailure(handle) {\n    defaultFetchFailure = handle;\n}\n/**\n * User can set default header for all records\n */\nexport function setDefaultHeader(name, value) {\n    defaultHeaders[name] = value; // defaultHeaders are collecting to the array\n}\n/**\n * User can set default auth value for all records\n */\nexport function setDefaultAuth(string) {\n    defaultHeaders.Authorization = string;\n}\n/**\n * Returns converted data by template\n */\nexport function callPattern(name, data) {\n    if (typeof name == 'string' && name in options.templates) { //find template by name\n        return options.templates[name](data);\n    }\n    else if (typeof name == \"function\") { // try use template if function is correct\n        return name(data);\n    }\n    return { data }; // if there isn't correct template\n}\nexport function extendsPattern(parent, child) {\n    if ('data' in child) {\n        parent.data = child.data;\n    }\n    if ('pageCount' in child) {\n        parent.pageCount = child.pageCount;\n    }\n    if ('protocol' in child) {\n        parent.protocol = child.protocol;\n    }\n    return parent;\n}\n/**\n * Check for pattern (template) for Record\n */\nfunction isValidPattern(pattern) {\n    if (typeof pattern === \"string\" && pattern.length > 0)\n        return true;\n    else if (typeof pattern === \"function\")\n        return true;\n    else // if pattern were not set or incorrect\n        return false;\n}\n/**\n * Fetching data for store\n */\nexport async function storeFetch(url, requestInit, isblob, pattern) {\n    const response = await options.http(url, requestInit, isblob); // raw response\n    if (response instanceof Blob) { // return value for Blob data\n        return {\n            header: response.header,\n            data: response.body,\n            error: false,\n            code: 200,\n            errorText: '',\n            pageCount: 0,\n            protocol: null\n        };\n    }\n    if (typeof response.body == 'object' && !Array.isArray(response.body) && '_errorCode' in response.body) { // case for error\n        if (response.body._errorBody.length > 0 && response.body._errorBody[0] == '{') {\n            response.body._errorBody = JSON.parse(response.body._errorBody); // forming errorBody\n        }\n        return {\n            header: response.header,\n            data: response.body._errorBody || null,\n            error: true,\n            code: response.body._errorCode || 500,\n            errorText: response.body._errorText || 'Unknow',\n            pageCount: 0,\n            protocol: null\n        };\n    }\n    let data = response.body;\n    let pageCount = 0;\n    let protocol = null;\n    if (isValidPattern(pattern)) { // check template\n        const result = callPattern(pattern, response.body) || {}; // use template for response.body if it's correct\n        data = result.data ?? data;\n        pageCount = result.pageCount ?? pageCount; // return data, pageCount variable and protocol data\n        protocol = result.protocol ?? protocol;\n    }\n    return {\n        header: response.header,\n        data,\n        code: 200,\n        error: false,\n        pageCount,\n        errorText: '',\n        protocol\n    };\n}\nexport const settings = {\n    template(name, logic) {\n        options.templates[name] = logic;\n        return this;\n    },\n    httpClient(client) {\n        options.http = client;\n        return this;\n    },\n    cookieWorker(logic) {\n        options.cookie = logic;\n        return this;\n    },\n    router(logic) {\n        options.router = logic;\n        return this;\n    }\n};\n", "import { appendMerge, isRef, queryToUrl, refOrVar, resolveOrLater, storeToQuery, urlPathParams } from \"./Utils.js\";\nimport { defaultHeaders, storeFetch, defaultFetchFailure } from \"./config.js\";\nimport { isReactive, reactive, watch } from \"vue\";\nvar ETagPlace;\n(function (ETagPlace) {\n    ETagPlace[ETagPlace[\"PATH\"] = 0] = \"PATH\";\n    ETagPlace[ETagPlace[\"QUERY\"] = 1] = \"QUERY\";\n})(ETagPlace || (ETagPlace = {}));\nvar EParamsTagsType;\n(function (EParamsTagsType) {\n    EParamsTagsType[EParamsTagsType[\"SIMPLE\"] = 0] = \"SIMPLE\";\n    EParamsTagsType[EParamsTagsType[\"FULL\"] = 1] = \"FULL\";\n})(EParamsTagsType || (EParamsTagsType = {}));\nvar ESwapMethod;\n(function (ESwapMethod) {\n    ESwapMethod[ESwapMethod[\"HOT\"] = 0] = \"HOT\";\n    ESwapMethod[ESwapMethod[\"LAZY\"] = 1] = \"LAZY\";\n    ESwapMethod[ESwapMethod[\"GREEDY\"] = 2] = \"GREEDY\";\n    ESwapMethod[ESwapMethod[\"PAGINATION\"] = 3] = \"PAGINATION\";\n})(ESwapMethod || (ESwapMethod = {}));\n/**\n * Checking for disabling some stuff on server\n */\nconst isClient = typeof document !== 'undefined';\n/**\n * Mark Object as setup object\n */\nexport const MarkSetup = Symbol('Record Setup');\nconst isSetup = (value) => (typeof value === 'object' && value[MarkSetup]);\nconst createRequest = () => {\n    let [resolve, reject] = [(data) => { }, () => { }];\n    const request = new Promise((res, rej) => { resolve = res; reject = rej; });\n    return { request, resolve, reject };\n};\nexport default class Record {\n    // Details\n    /** Redirect to current request if on action */\n    _oneRequestAtTime = false;\n    /** Object of current Request (Promise object when return a response) */\n    _currentRequest = null;\n    // Fetch settings\n    /** Pathname for fetching  */\n    _url = '';\n    /** @deprecated Other Stores as Query object */\n    _queryStore = null;\n    /** Query for fetching */\n    _query = {};\n    /** Baked Query for fetching [cannot be removed] */\n    _staticQuery = {};\n    /** Path params for query */\n    _pathParams = {};\n    /** Headers for query */\n    _headers = {};\n    /** Body request for query */\n    _body = null;\n    /** Authorization for query */\n    _auth = null;\n    /** Always use body */\n    _forceBody = false;\n    /** Response type is blob */\n    _isBlob = false;\n    /** Current `pattern response reader` */\n    _template = '';\n    // Cachin / Tags\n    _tags = { 'id': ETagPlace.PATH };\n    _tagsType = { 'id': EParamsTagsType.SIMPLE };\n    _lastRequestTags = {};\n    // Pre Fetch config\n    /** Receive data only when the response is empty */\n    _onNullCheck = false;\n    /** [For nerds] When to delete data in response  */\n    _swapMethod = ESwapMethod.HOT;\n    // Post Fetch config\n    /** Data from `pattern response reader` */\n    _protocol = {};\n    /** Rebuild the object at the specified rule */\n    _recordRuleBehaviour = [];\n    /** Default settings if no rule is suitable  */\n    _defaultRule = () => null;\n    // Event Handlers:\n    /** Error Handler */\n    _onError = null;\n    /** Finish Response Handler */\n    _onEnd = null;\n    // Links\n    /** For re-launching fetch */\n    _lastStep = () => (new Promise((resolve) => resolve(null)));\n    /** Proxy object for getting multiple data, uses in param.query */\n    _proxies = {};\n    /** Registered borrows logic */\n    _borrow = new Map();\n    _borrowAnother = new Map();\n    _enabledBorrow = true;\n    /** Old Response / Cached Data */\n    _allCachedResponse = new Map();\n    _paginationEnabled = false;\n    _pagination = {\n        change: false,\n        where: 'path',\n        param: 'page'\n    };\n    /** Vue Reactive Variables */\n    _variables = reactive({\n        currentPage: 1, // Pagination.current\n        maxPages: 1, // Pagination.lastPage\n        autoReloadPagination: false, // Reload data after change page\n        expandResponse: false, // Appends response to end\n        isLastPage: false, // Is last page\n        response: null, // Reactive Response Object\n        headers: {}, // Response headers\n        error: '', // status text\n        frozenKey: 0, /** @deprecated [Nerd] :key variable, for manual watch effect */\n        isError: false,\n        isLoading: false\n    });\n    /** @deprecated [Nerd] Frozen Response for manual trigger WatchEffect */\n    _frozenResponse = null;\n    // Property \n    /** @deprecated useless */\n    get frozenResponse() {\n        return this._frozenResponse;\n    }\n    /** @deprecated useless */\n    get frozenKey() {\n        return this._variables.frozenKey;\n    }\n    /**\n     * Get response\n     */\n    get response() {\n        return this._variables.response;\n    }\n    /**\n     * Set response\n     */\n    set response(value) {\n        this._variables.response = value;\n    }\n    /**\n     * Get response Headers\n     */\n    get headers() {\n        return this._variables.headers;\n    }\n    /**\n     * [Module] Pagination\n     *\n     */\n    get pagination() {\n        // Extract context\n        const pThis = this;\n        return {\n            setup(how, enabledByDefault = true) {\n                this.enabled = enabledByDefault;\n                if (how.startsWith('query:')) {\n                    pThis._pagination.where = 'query';\n                    pThis._pagination.param = how.slice(6);\n                }\n                else if (how.startsWith('path:')) {\n                    pThis._pagination.where = 'path';\n                    pThis._pagination.param = how.slice(5);\n                }\n                pThis._swapMethod = ESwapMethod.PAGINATION;\n                return pThis;\n            },\n            autoReload(value = true) {\n                pThis._variables.autoReloadPagination = value;\n                return pThis;\n            },\n            set enabled(v) {\n                pThis._paginationEnabled = v;\n            },\n            toFirst() {\n                if (pThis._variables.currentPage == 1)\n                    return pThis;\n                pThis._variables.currentPage = 1;\n                pThis._variables.isLastPage = pThis._variables.maxPages == pThis._variables.currentPage;\n                if (pThis._variables.autoReloadPagination)\n                    pThis._lastStep();\n                return pThis;\n            },\n            toLast() {\n                if (pThis._variables.currentPage == pThis._variables.maxPages)\n                    return pThis;\n                pThis._variables.currentPage = pThis._variables.maxPages;\n                pThis._variables.isLastPage = pThis._variables.maxPages == pThis._variables.currentPage;\n                pThis._pagination.change = true;\n                if (pThis._variables.autoReloadPagination)\n                    pThis._lastStep();\n                return pThis;\n            },\n            next() {\n                if (pThis._variables.maxPages > pThis._variables.currentPage) {\n                    pThis._variables.currentPage += 1;\n                    pThis._variables.isLastPage = pThis._variables.maxPages == pThis._variables.currentPage;\n                    pThis._pagination.change = true;\n                    if (pThis._variables.autoReloadPagination)\n                        pThis._lastStep();\n                }\n                return pThis;\n            },\n            prev() {\n                if (pThis._variables.currentPage > 1) {\n                    pThis._variables.currentPage -= 1;\n                    pThis._variables.isLastPage = pThis._variables.maxPages == pThis._variables.currentPage;\n                    pThis._pagination.change = true;\n                    if (pThis._variables.autoReloadPagination)\n                        pThis._lastStep();\n                }\n                return pThis;\n            },\n            get isLastPage() {\n                return pThis._variables.isLastPage;\n            },\n            set current(v) {\n                pThis._variables.currentPage = v;\n                pThis._pagination.change = true;\n                if (pThis._variables.autoReloadPagination)\n                    pThis._lastStep();\n            },\n            get current() {\n                return pThis._variables.currentPage;\n            },\n            get lastPage() {\n                return pThis._variables.maxPages;\n            }\n        };\n    }\n    /**\n     * Get Path Param and Query, values\n     */\n    get params() {\n        const pthis = this;\n        return {\n            get path() {\n                return pthis._pathParams;\n            },\n            get query() {\n                return pthis._proxies.query;\n            }\n        };\n    }\n    /**\n     * other data from `pattern response reader`, define with `defineProtocol`\n     */\n    get protocol() {\n        return this._protocol;\n    }\n    /**\n     * Is fetching data\n     */\n    get loading() {\n        return this._variables.isLoading;\n    }\n    /**\n     * If catch error\n     */\n    get error() {\n        return this._variables.isError;\n    }\n    /**\n     * If catch error set errorText\n     */\n    get errorText() {\n        return this._variables.error;\n    }\n    // Creating\n    static new(url, defaultValue) {\n        const instance = new Record();\n        instance._url = url;\n        instance._variables.response = defaultValue ?? null;\n        instance._proxies.query = new Proxy({}, {\n            get(t, p, r) {\n                if (p in instance._query)\n                    return refOrVar(instance._query[p]);\n                else if (p in instance._staticQuery)\n                    return refOrVar(instance._staticQuery[p]);\n                return undefined;\n            }\n        });\n        return instance;\n    }\n    // Sugar\n    /**\n     * [Sugar] Change d.ts type from array to item\n     */\n    get one() {\n        return this._variables.response;\n    }\n    /**\n     * [Sugar] Change d.ts type from item to array\n     */\n    get many() {\n        return this._variables.response;\n    }\n    /**\n    * [Sugar] Creating Bearer auth string\n    */\n    static Bearer(token) {\n        return `Bearer ${token}`;\n    }\n    /**\n    * [Sugar] Creating Basic auth string\n    */\n    static Basic(login, password) {\n        return `Basic ${btoa(login + \":\" + password)}`;\n    }\n    /**\n     * [Sugar] body json\n     */\n    static json(item) {\n        return {\n            [MarkSetup]: true,\n            headers: { 'Content-Type': 'application/json' },\n            body: () => JSON.stringify(refOrVar(item)),\n        };\n    }\n    /**\n     * [Sugar] body urlEncoded\n     */\n    static urlEncoded(item) {\n        return {\n            [MarkSetup]: true,\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n            body: () => {\n                const raw = refOrVar(item);\n                return queryToUrl(raw);\n            },\n        };\n    }\n    // Configuration\n    // Custom presets\n    preset(object) {\n        if (typeof object === 'function') {\n            object(this);\n            return this;\n        }\n        if ('body' in object)\n            this.body(object.body);\n        if ('appendsResponse' in object)\n            this.appendsResponse(object.appendsResponse);\n        if ('onlyOnEmpty' in object)\n            this.onlyOnEmpty(object.onlyOnEmpty);\n        if ('oneRequestAtTime' in object)\n            this.oneRequestAtTime(object.oneRequestAtTime);\n        if (object.headers) {\n            for (const [name, value] of Object.entries(object.headers))\n                this.header(name, value);\n        }\n        if (object.rule) {\n            for (const [condition, apply] of object.rule)\n                this.rule(condition, apply);\n        }\n        if (object.borrow) {\n            for (const [condition, from, research] of object.borrow)\n                this.borrowFrom(condition, from, research);\n        }\n        if (object.defaultRule)\n            this.defaultRule(object.defaultRule);\n        if (object.query)\n            this.query(object.query);\n        if (object.swapMethod)\n            this.swapMethod(object.swapMethod);\n        if (object.pagination) {\n            const [name, enabled, autoReload] = object.pagination;\n            this.pagination.setup(name, enabled);\n            this.pagination.autoReload(autoReload);\n        }\n        if (object.pathParams) {\n            for (const [name, value] of Object.entries(object.pathParams))\n                this.pathParam(name, value);\n        }\n        return this;\n    }\n    /**\n    * [Configuration]\n    * [Nerds] Creating Tag for processing: `borrow`, `caching`, `rules`\n    *\n    * simple - check has value or not\n    * full   - can access to value\n    */\n    createTag(field, access = 'simple') {\n        const acecssValue = access == 'simple'\n            ? EParamsTagsType.SIMPLE\n            : EParamsTagsType.FULL;\n        if (field.startsWith('query:')) { // Query Tag\n            const name = field.slice(6); // remove 'query:'\n            this._tags[name] = ETagPlace.QUERY;\n            this._tagsType[name] = acecssValue;\n        }\n        else if (field.startsWith(\"path:\")) { // Path Param Tag\n            const name = field.slice(5); // remove 'path:'\n            this._tags[name] = ETagPlace.PATH;\n            this._tagsType[name] = acecssValue;\n        }\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Redirect request to current Request if launched\n     */\n    oneRequestAtTime(value = true) {\n        this._oneRequestAtTime = value;\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Appends new response to current response like\\\n     * `response.push(...new_response)`\n     *\n     * ! If enable disabled swapMethod [Nerd thing]\n     */\n    appendsResponse(value = true) {\n        if (isClient)\n            this._variables.expandResponse = value;\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Only do Fetch if response == null\n     */\n    onlyOnEmpty(enabled = true) {\n        if (isClient)\n            this._onNullCheck = enabled;\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Create rule on specific behaviour\n     *\n     * Example:\\\n     * `Our url: /api/my-stuff?page=1`\n     *\n     * Create rule for `page` has some value\n     *\n     * ```ts\n     * .createTag('query:page', 'simple') // Creating tag to checking behaviour, and get simple access\n     * .rule(\n     *    { 'page': '*' }, // Search by tag: Query param `page` has any value\n     *    record => record\n     *      .template('my-template-pagination') // We use template for Pagination type response\n     * )\n     * .defaultRule(\n     *    record => record\n     *      .template('') // Else disable template\n     * )\n     * ```\n     */\n    rule(rule, behaviour) {\n        const check = (recordTag) => {\n            return typeof rule == 'function'\n                ? rule(this.params)\n                : Record.compareTags(rule, recordTag, this._lastRequestTags);\n        };\n        // Adding rule to checking stack\n        this._recordRuleBehaviour.push((recordTag) => {\n            if (!check(recordTag))\n                return false; // Not valid skip\n            behaviour(this); // Valid process\n            return true;\n        });\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Deafult rule if other rules not valid\n     *\n     * Check `rule` method for example\n     */\n    defaultRule(behaviour) {\n        this._defaultRule = () => behaviour(this);\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Rewrite url, using in `rule` and `defaultRule` section\n     */\n    url(path) {\n        this._url = path;\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Enable / Disable logic for `borrowAtAnother` and `borrowAtSelf`\n     */\n    enableBorrow(value) {\n        this._enabledBorrow = value;\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Rollback to cached data, using in `rule` and `defaultRule` section\n     * Condition example:\n     *  { id: '*' } // get old response data where: id sets\n     *  { id: null } // get old response data where: id not sets\n     */\n    prepare(condition, behaviour = () => true) {\n        let data = this.cached(condition);\n        // Custom checking to valid, isnt -> break logic\n        if (!behaviour())\n            return this;\n        if (data != null) {\n            this.setResponse(data);\n            this._variables.currentPage = 1;\n            this._variables.isLastPage = this._variables.currentPage == this._variables.maxPages;\n        }\n        else {\n            console.warn('prepare is empty');\n        }\n        return this;\n    }\n    /**\n     * [Configuration]\n     * [Nerds] When to delete data in response\n     *\n     * `hot`    - Seamless loading\n     * `lazy`   - After checking borrow algorithm, delete current data\n     * `greedy` - Immediately delete current data from start fetching\n     */\n    swapMethod(method) {\n        if (method == 'hot')\n            this._swapMethod = ESwapMethod.HOT;\n        else if (method == 'greedy')\n            this._swapMethod = ESwapMethod.GREEDY;\n        else if (method == 'lazy')\n            this._swapMethod = ESwapMethod.LAZY;\n        else if (method == 'pagination')\n            this._swapMethod = ESwapMethod.PAGINATION;\n        return this;\n    }\n    /**\n     * [Configuration]\n     * [Nerds] Get data from another object, instead of fetching. Otherwise do fetching\n     *\n     * @param condition Check whether the conditions are suitable for the execution of the \"borrow\". (By tags or Functioin)\n     * @param another   The object we're going to take from\n     * @param as        Logic for finding what you need in an object\n     */\n    borrowFrom(condition, another, as) {\n        if (!isClient)\n            return this;\n        this._borrowAnother.set(condition, (_) => {\n            const object = refOrVar(another); // Get raw data\n            if (!Array.isArray(object)) { // If not array skip\n                console.warn('borrow, from value is not array');\n                return null;\n            }\n            for (const part of object) { // Search, what you need\n                const result = as(part);\n                if (typeof result != 'undefined' && result != null) {\n                    return result;\n                }\n            }\n            return null;\n        });\n        return this;\n    }\n    /**\n     * [Configuration]\n     * [Nerds] Get data from self, by caching value, instead of fetching. Otherwise do fetching\n     *\n     * @param condition Check whether the conditions are suitable for the execution of the \"borrow\". (By tags or Functioin)\n     * @param from      Get caching data by tags. Otherwise skip \"borrow\"\n     * @param as        Logic for finding what you need in an object\n     */\n    borrowAtSelf(where, from, as) {\n        if (!isClient)\n            return this;\n        this._borrow.set(where, [from, (response) => {\n                if (!Array.isArray(response)) { // If not array skip\n                    console.warn('{value} is not array');\n                    return null;\n                }\n                for (const part of response) {\n                    const result = as(part);\n                    if (typeof result != 'undefined' && result != null) {\n                        return result;\n                    }\n                }\n                return null;\n            }]);\n        return this;\n    }\n    /**\n     * [Configuration]\n     * `pattern response reader` using for customize raw response\n     * Like:\n     * { \"items\": [ ...someStuff ] }\n     * we taking \"items\" from response, and final result fetch is\n     * [ ...someStuff ]\n     *\n     * More in: https://notelementimport.github.io/nuxoblivius-docs/release/template.html\n     */\n    template(template) {\n        this._template = template;\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Set path-param value in Pathname `this._url`\n     */\n    pathParam(name, value) {\n        // If we put promise object\n        resolveOrLater(value, (result) => {\n            this._pathParams[name] = result;\n        });\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Set query, for request\n     * Has baked mode, a.k.a by default. This values cannot be delete by `clearDynamicQuery()`\n     */\n    query(query, baked = false) {\n        // Store as Query, not to use\n        if (isRef(query)) {\n            this._queryStore = query;\n            return this;\n        }\n        if (baked) {\n            this._staticQuery = query;\n        }\n        else {\n            if (isReactive(query)) // Reactive rewrite old (not baked) query\n                this._query = query;\n            else\n                this._query = appendMerge(this._query, query);\n        }\n        return this;\n    }\n    /**\n     * [Configuration]\n     * `pattern response reader` protocol - other data from raw response\n     * Craete default value if not setting\n    */\n    defineProtocol(key, defaultValue = null) {\n        this._protocol[key] = defaultValue;\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Header of request\n    */\n    header(name, value) {\n        // If we put promise object\n        resolveOrLater(value, (result) => {\n            this._headers[name] = result;\n        });\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Body of request\n     * And enabling force mode for body\n    */\n    body(body) {\n        if (isSetup(body)) {\n            this.preset(body);\n            return this;\n        }\n        // If we put promise object\n        resolveOrLater(body, (result) => {\n            this._body = result;\n            this._forceBody = result != null;\n        });\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Watch Refs and call reload data after changing Refs\n     */\n    reloadBy(object) {\n        // Disable feature in Server (leak fix)\n        if (!isClient)\n            return this;\n        // Extract context\n        const pThis = this;\n        // If we put promise object\n        resolveOrLater(object, (result) => {\n            // Vue Ref\n            if (isReactive(result) || isRef(result) || result?.__v_isRef) {\n                watch(result, () => {\n                    const oldValueOnNullCheck = pThis._onNullCheck;\n                    const oldValueExpandCheck = pThis._variables.expandResponse;\n                    pThis._onNullCheck = false;\n                    pThis._variables.expandResponse = false;\n                    pThis.pagination.toFirst();\n                    pThis._lastStep()\n                        .then(() => { pThis._onNullCheck = oldValueOnNullCheck; pThis._variables.expandResponse = oldValueExpandCheck; });\n                });\n                return;\n            }\n            else {\n                // State Manager Ref\n                if (!('_module_' in result))\n                    throw `reloadBy: only ref support`;\n                result.watch(() => {\n                    const oldValueOnNullCheck = pThis._onNullCheck;\n                    const oldValueExpandCheck = pThis._variables.expandResponse;\n                    pThis._onNullCheck = false;\n                    pThis._variables.expandResponse = false;\n                    pThis.pagination.toFirst();\n                    pThis._lastStep()\n                        .then(() => { pThis._onNullCheck = oldValueOnNullCheck; pThis._variables.expandResponse = oldValueExpandCheck; });\n                });\n            }\n        });\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Authorization for request\n     */\n    auth(data) {\n        // If we put promise object\n        resolveOrLater(data, (result) => {\n            this._auth = result;\n        });\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Change Response type to Blob\n     */\n    isBlob(value = true) {\n        this._isBlob = value;\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Clearing queries, baked not touched\n     */\n    clearDynamicQuery() {\n        this._query = {};\n        return this;\n    }\n    /**\n     * [Configuration]\n     * On failure handle, can restart fetch\n     */\n    onFailure(method) {\n        this._onError = method;\n        return this;\n    }\n    /**\n     * [Configuration]\n     * Simple handle tracking of end fetch new data\n     */\n    onFinish(method) {\n        this._onEnd = method;\n        return this;\n    }\n    // Utils\n    /**\n     * Extends link of Method\n     */\n    then(handle) {\n        handle();\n        return this;\n    }\n    /**\n     * Clearing Response\n     */\n    clearResponse() {\n        this._variables.response = null;\n        return this;\n    }\n    /**\n     * Reset specific data\n     */\n    reset(config = { pagination: true, response: true, query: true }) {\n        if (config.pagination) {\n            this._variables.currentPage = 1;\n        }\n        if (config.response) {\n            if (typeof config.response === \"boolean\")\n                this.clearResponse();\n            else if (typeof config.response === 'object')\n                this._variables.response = config.response;\n        }\n        if (config.query) {\n            this.clearDynamicQuery();\n        }\n    }\n    /**\n     * Get old response by tag\n     *\n     * Example\n     * ```ts\n     * .createTag('path:id', 'full')\n     * .cached({ 'id': 2 }) // Getting response where path param id is 2\n     * ```\n     */\n    cached(rule, defaultIsnt = null) {\n        for (const [descriptor, value] of this._allCachedResponse.entries()) {\n            if (Record.compareTags(rule, descriptor)) {\n                return value;\n            }\n        }\n        return defaultIsnt;\n    }\n    /**\n     * Delete cache by tag\n     *\n     * @deprecated not needed, while\n     */\n    deleteCached(condition) {\n        // Not working while\n        // this._allCachedResponse.clear()\n    }\n    /**\n     * Not using\n     * @deprecated\n     */\n    frozenTick() {\n        this._variables.frozenKey += 1;\n        return this;\n    }\n    // Request\n    /**\n     * Start request with GET method\n     * @param id setting path-param id\n     */\n    async get(id = null) {\n        this.swapGreedy();\n        if (!this._forceBody)\n            this._body = null;\n        this.pathParam('id', id);\n        this._lastStep = () => this.get(id);\n        return this.doFetch('get');\n    }\n    /**\n     * Start request with POST method\n     * @param body setting body (can be ignored)\n     */\n    async post(body = null) {\n        if (this._onNullCheck && this._variables.response != null) {\n            return this._variables.response;\n        }\n        this.swapGreedy();\n        if (!this._forceBody)\n            this._body = body;\n        this._lastStep = () => this.post(body);\n        return this.doFetch('post');\n    }\n    /**\n     * Start request with PUT method\n     * @param body setting body (can be ignored)\n     */\n    async put(body = null) {\n        this.swapGreedy();\n        if (!this._forceBody)\n            this._body = body;\n        this._lastStep = () => this.put(body);\n        return this.doFetch('put');\n    }\n    /**\n     * Start request with DELETE method\n     * @param id setting path-param id\n     */\n    async delete(id = null) {\n        this.swapGreedy();\n        if (!this._forceBody)\n            this._body = null;\n        this.pathParam('id', id);\n        this._lastStep = () => this.delete(id);\n        return this.doFetch('delete');\n    }\n    /**\n     * Start request with PATCH method\n     * @param id setting path-param id\n     */\n    async patch(id = null) {\n        this.swapGreedy();\n        if (!this._forceBody)\n            this._body = null;\n        this.pathParam('id', id);\n        this._lastStep = () => this.patch(id);\n        return this.doFetch('patch');\n    }\n    // Private Methods :\n    /**\n     * Getting from other object_data if suitable\n     */\n    borrowingFromAnother(condition) {\n        if (!this._enabledBorrow)\n            return null;\n        /**\n         * Checking condition, checking can be as Compare Tags or Function with boolean return\n        */\n        const checkCondition = (condition, other) => {\n            return typeof other === 'function'\n                ? other(this.params)\n                : Record.compareTags(other, condition, this._lastRequestTags);\n        };\n        /**\n         * Borrow From (From other object)\n        */\n        if (this._borrowAnother.size > 0) {\n            for (const [rule, searching] of this._borrowAnother.entries()) {\n                if (!checkCondition(condition, rule) || !this._enabledBorrow)\n                    continue;\n                const result = searching(null); // Try find suitable object\n                if (result)\n                    return result;\n            }\n        }\n        /**\n         * Borrow At Self (From cache)\n        */\n        if (this._borrow.size > 0) {\n            for (const [rule, options] of this._borrow.entries()) {\n                if (!checkCondition(condition, rule) || !this._enabledBorrow)\n                    continue;\n                const [cacheCondition, searching] = options;\n                let cached = this.cached(cacheCondition); // Getting cached by condition\n                if (!cached)\n                    break; // Not found cache\n                const result = searching(cached); // Try find suitable object from cache\n                if (result)\n                    return result;\n            }\n        }\n        return null;\n    }\n    /**\n     * Collect all queries into one\n     */\n    compileQuery() {\n        const queryObject = this._queryStore != null\n            ? storeToQuery(this._queryStore)\n            : {};\n        return appendMerge(queryObject, this._staticQuery, this._query, this.compilePagination());\n    }\n    /**\n     * Creating pagination, or setup path-param\n     */\n    compilePagination() {\n        if (!this._paginationEnabled)\n            return {};\n        // Pagination in Path Param\n        if (this._pagination.where == 'path') {\n            this.pathParam(this._pagination.param, this._variables.currentPage);\n            return {};\n        }\n        // Pagination in Query\n        else if (this._pagination.where == \"query\") {\n            return {\n                [this._pagination.param]: this._variables.currentPage\n            };\n        }\n    }\n    /**\n     * Try resolve condition to custom setup or use default setup\n     */\n    proccesRules(condition) {\n        if (this._recordRuleBehaviour.length == 0)\n            return;\n        for (const rule of this._recordRuleBehaviour) {\n            if (rule(condition)) // If rule loaded\n                return; // End method\n        }\n        this._defaultRule();\n    }\n    /**\n     * Generate tag object from Path param, and Queries\n     *\n     * Look `createTag()` for understand code\n     */\n    recordDataTag(compiledQuery) {\n        const tag = {};\n        // Get all registered Tags\n        for (const [paramName, type] of Object.entries(this._tags)) {\n            const access = this._tagsType[paramName]; // Access of Tag\n            const value = type == ETagPlace.PATH\n                ? refOrVar(this._pathParams[paramName]) // Getting value from Path param\n                : refOrVar(compiledQuery[paramName]); // Getting value from Query\n            // Write data like { \"param\": null } or { \"param\": 1 }\n            if (access == EParamsTagsType.FULL)\n                tag[paramName] = value ?? null;\n            else\n                tag[paramName] = value ? '*' : null;\n        }\n        return tag;\n    }\n    /**\n     * Call request\n     */\n    async doFetch(method = 'get') {\n        if (this._oneRequestAtTime && this._currentRequest != null) {\n            return this._currentRequest;\n        }\n        const { request, resolve } = createRequest();\n        this._currentRequest = request;\n        const endRequest = (value) => {\n            this._currentRequest = null;\n            resolve(value);\n        };\n        this._variables.isLoading = true;\n        const pageChange = this._pagination.change;\n        this._pagination.change = false;\n        // Generate Record Tag for condition\n        let recordTag = this.recordDataTag(this.compileQuery());\n        // Setup request\n        this.proccesRules(recordTag);\n        recordTag = this.recordDataTag(this.compileQuery());\n        this._lastRequestTags = recordTag;\n        // Refersh query after Setup\n        let queries = this.compileQuery();\n        /**\n         * Check behaviour `.onlyOnEmpty()` if enable\n         * If is enable to continue, Response must be empty\n         * Else return old response\n        */\n        if (this._onNullCheck) {\n            const response = this._variables.response;\n            const isEmpty = (response == null)\n                || (typeof response == 'object' && Object.keys(response ?? []).length == 0)\n                || (this._swapMethod == ESwapMethod.PAGINATION && pageChange);\n            if (!isEmpty) {\n                this._variables.isLoading = false;\n                endRequest(response);\n                return response;\n            }\n        }\n        /**\n         * If enable borrow data:\n         * Borrow data from another object whenever possible\n         */\n        if (method == 'get' || method == \"post\") {\n            const result = this.borrowingFromAnother(recordTag);\n            if (result != null) { // If found return this data\n                this.setResponse(result);\n                this._variables.error = '';\n                this._variables.isError = false;\n                this._variables.isLoading = false;\n                endRequest(result);\n                // Call finsih handler\n                if (this._onEnd)\n                    this._onEnd(result);\n                return result;\n            }\n        }\n        /**\n         * [Nerd] Erase data if necessary\n         */\n        this.swapLazy();\n        // Compile final URL\n        const url = urlPathParams(this._url, this._pathParams) // Base path + path params\n            + queryToUrl(queries); // Search param\n        // Add Default Headers and Record Headers\n        const headers = {};\n        for (const [key, value] of Object.entries(defaultHeaders)) // Default Headers\n            headers[key] = refOrVar(value);\n        for (const [key, value] of Object.entries(this._headers)) // Record Headers\n            headers[key] = refOrVar(value);\n        // Generate Options for `fetch()`\n        const options = {\n            // Append headers + auth\n            headers: appendMerge(headers, { 'Authorization': refOrVar(this._auth) }),\n            method,\n        };\n        // If use body connect to options\n        if (this._body != null) {\n            // Getting body\n            options.body = refOrVar(this._body);\n            // Form Data:\n            if (options.body instanceof FormData)\n                delete headers['Content-Type'];\n            // Json:\n            // Convert object to string\n            else if (typeof options.body == 'object')\n                options.body = JSON.stringify(this._body);\n        }\n        // Request data from http > config\n        let fetchResult = await storeFetch(url, options, this._isBlob, this._template);\n        /**\n         * If request had error, call onError handler\n        */\n        if (fetchResult.error) {\n            const answer = await (this._onError || defaultFetchFailure)({ text: fetchResult.errorText, code: fetchResult.code }, () => this.doFetch(method));\n            // If answer had object data replace\n            if (typeof answer == 'object') {\n                fetchResult.data = answer;\n                fetchResult.error = false;\n            }\n        }\n        // Write response to Record Object\n        this.setResponse(fetchResult.data);\n        // Set Meta\n        this._variables.error = fetchResult.errorText;\n        this._variables.maxPages = fetchResult.pageCount;\n        this._variables.isError = fetchResult.error;\n        this._variables.isLoading = false;\n        this._variables.headers = fetchResult.header;\n        if (fetchResult.protocol != null) {\n            this._protocol = fetchResult.protocol;\n        }\n        // Cache data\n        this.keep(fetchResult.data, recordTag);\n        // Call finsih handler\n        if (this._onEnd)\n            this._onEnd(fetchResult.data);\n        endRequest(fetchResult.data);\n        return fetchResult.data;\n    }\n    /** Erase response after call doFetch */\n    swapGreedy() {\n        // Disable on appendResponse\n        if (this._swapMethod == ESwapMethod.GREEDY && !this._variables.expandResponse) {\n            this.clearResponse();\n        }\n    }\n    /** Erase response after borrow function */\n    swapLazy() {\n        // Disable on appendResponse\n        if (this._swapMethod == ESwapMethod.LAZY && !this._variables.expandResponse) {\n            this.clearResponse();\n        }\n    }\n    /**\n     * Compare tags see `createTag`\n     */\n    static compareTags(tags, other, otherLast) {\n        for (const [name] of Object.entries(tags)) {\n            const value = refOrVar(tags[name]);\n            if (!(name in other))\n                return false; // Not includes in other. Not valid\n            if (otherLast && name in otherLast) {\n                if (value == '<>' && otherLast[name] != other[name])\n                    continue;\n            }\n            const otherValue = other[name] ?? null;\n            if (value == otherValue) // If equal each others\n                continue;\n            // If one use `any` and other not use `null`\n            // Like: { tag: '*' } + { tag: null } = false\n            // Like: { tag: '*' } + { tag: 1 }    = true\n            if ((value == '*' && otherValue != null) || (otherValue == '*' && value != null))\n                continue;\n            // Else not valid\n            return false;\n        }\n        return true;\n    }\n    // Write response to Record\n    setResponse(v) {\n        // Appends Mode\n        if (this._variables.expandResponse) {\n            if (!this._variables.response) // Not Exist create\n                this._variables.response = [];\n            this._variables.response.push(...v);\n        }\n        // Rewrite Mode\n        else {\n            this._variables.response = v;\n        }\n        return this._variables.response;\n    }\n    // Cache response by Tags\n    async keep(response, recordTag) {\n        for (const [key] of this._allCachedResponse.entries()) {\n            if (Record.compareTags(key, recordTag)) {\n                this._allCachedResponse.set(key, response);\n                return;\n            }\n        }\n        this._allCachedResponse.set(recordTag, // Generate tag\n        response);\n    }\n}\n", "import { reactive } from \"vue\";\nconst isClient = typeof document !== 'undefined';\nconst storageOfStores = new Map();\nconst laterAwaiter = [];\nexport function deleteDump() {\n    const recursiveDeleteDump = (_value) => {\n        if (_value._variables) {\n            for (const [key, value] of Object.entries(_value._variables)) {\n                _value._variables[key] = _value._defaults[key];\n            }\n        }\n        if (_value._stores) {\n            for (const [key, value] of Object.entries(_value._stores)) {\n                recursiveDeleteDump(value);\n            }\n        }\n        for (const name of Object.getOwnPropertyNames(_value)) {\n            const value = _value[name];\n            if (typeof value == 'object' && value != null && '_variables' in value && value._variables && typeof value._variables == 'object' && 'response' in value._variables) {\n                value._variables.response = null;\n            }\n        }\n    };\n    for (const [key, value] of storageOfStores.entries()) {\n        recursiveDeleteDump(value);\n    }\n}\n/**\n * Creating Proxy-object (for reactivity)\n */\nfunction create_proxy(target, get, has = (t, p) => true) {\n    return new Proxy({}, {\n        get(target, p, receiver) {\n            return get(target, p, receiver);\n        },\n        has(target, p) {\n            return has(target, p);\n        },\n    });\n}\n/**\n * Defining all properties and functions for store object\n */\nfunction raise(store) {\n    store.prototype.ref = create_proxy({}, (t, p) => create_proxy({}, (subT, subP) => {\n        return instance.ref[p][subP];\n    }, () => true), () => true);\n    const instance = new store();\n    const variables = reactive({});\n    // collect all properties for Store object (instance)\n    Object.defineProperty(instance, '_defaults', {\n        value: {},\n        configurable: false\n    });\n    Object.defineProperty(instance, '_variables', {\n        get() { return variables; },\n        configurable: false\n    });\n    Object.defineProperty(instance, '_stores', {\n        value: {},\n        configurable: false\n    });\n    Object.defineProperty(instance, '_watcher', {\n        value: {},\n        configurable: false\n    });\n    Object.defineProperty(instance, 'ref', {\n        get() {\n            const proxy = create_proxy(store, // where we create proxy-object for store\n            (target, p, receiver) => {\n                if (p in instance) {\n                    return {\n                        _module_: 'EX-REF',\n                        get value() {\n                            return instance[p];\n                        },\n                        name: p,\n                        get isEmpty() {\n                            const value = instance[p];\n                            return typeof value == 'undefined' || value == null;\n                        },\n                        get isImportant() {\n                            return p[0] == '$';\n                        },\n                        watch(func) {\n                            if (!isClient)\n                                return;\n                            if (!(p in instance._watcher)) {\n                                later(() => instance._watcher[p].push(func));\n                            }\n                            else {\n                                instance._watcher[p].push(func);\n                            }\n                        }\n                    };\n                }\n                throw `Object ${p} not founed`;\n            });\n            return proxy; // its returning value - proxy-object\n        }\n    });\n    const triggerToChanges = (nameObject) => {\n        if (instance._watcher[nameObject]) { // get functions that should be called after watcher triggering\n            for (const func of instance._watcher[nameObject]) {\n                func(); // call them\n            }\n        }\n    };\n    const objectDefineReadOnly = (name, to, as = '_variables') => {\n        Object.defineProperty(instance, name, {\n            get() {\n                return instance[as][to];\n            }\n        });\n    };\n    const objectDefine = (name, to, as = '_variables') => {\n        Object.defineProperty(instance, name, {\n            get() {\n                return instance[as][to];\n            },\n            set(v) {\n                instance[as][to] = v;\n                triggerToChanges(to);\n            }\n        });\n        instance._watcher[name] = [];\n    };\n    // checking if property name is not default (private)\n    const isDefaultVar = (name) => name == 'ref' || name == '_defaults' || name == '_stores' || name == '_variables' || name == '_watcher';\n    // Define property to reactive\n    for (const propertyName of Object.getOwnPropertyNames(instance)) {\n        if (isDefaultVar(propertyName)) // if it has default name\n            continue;\n        const valueOfProperty = instance[propertyName]; // value for property at this moment\n        const isNotClassObject = (v = valueOfProperty) => (typeof v != 'undefined' && v != null)\n            && (typeof v != 'object' || (typeof v == 'object' && Object.getPrototypeOf(v).__proto__ == null || Array.isArray(v)));\n        // If Undefined\n        if (typeof valueOfProperty == 'undefined') {\n            if ('_' + propertyName in instance) {\n                if (isNotClassObject(instance['_' + propertyName])) {\n                    instance._variables[propertyName] = instance['_' + propertyName];\n                    instance._defaults[propertyName] = instance['_' + propertyName];\n                    objectDefineReadOnly(propertyName, propertyName);\n                    objectDefine('_' + propertyName, propertyName);\n                }\n                else {\n                    instance._stores[propertyName] = instance['_' + propertyName];\n                    objectDefineReadOnly(propertyName, propertyName, '_stores');\n                    objectDefine('_' + propertyName, propertyName, '_stores');\n                }\n            }\n        }\n        // Is Reactive value\n        else if ((isNotClassObject() || valueOfProperty == null) && propertyName[0] != '_') {\n            instance._variables[propertyName] = valueOfProperty;\n            instance._defaults[propertyName] = valueOfProperty;\n            objectDefine(propertyName, propertyName);\n        }\n    }\n    for (const [name, value] of Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(instance)))) {\n        if (isDefaultVar(name))\n            continue;\n        if (typeof value.value == 'undefined' && typeof value.get == 'undefined') {\n            if ('_' + name in instance) {\n                instance._variables[name] = instance['_' + name];\n                instance._defaults[name] = instance['_' + name];\n                Object.defineProperty(instance, name, {\n                    get() {\n                        return instance._variables[name];\n                    },\n                    set(v) {\n                        value.set.call(instance, v);\n                    }\n                });\n                Object.defineProperty(instance, '_' + name, {\n                    get() {\n                        return instance._variables[name];\n                    },\n                    set(v) {\n                        instance._variables[name] = v;\n                        triggerToChanges(name);\n                    }\n                });\n                instance._watcher[name] = [];\n            }\n        }\n    }\n    if ('mounted' in instance) {\n        instance.mounted();\n    }\n    return instance;\n}\n/**\n * Store defining\n */\nexport function defineStore(store) {\n    const objectStore = storageOfStores.get(store); // store may already exist\n    if (typeof objectStore == 'undefined') {\n        let object = raise(store); // if it isn't exists --> raise\n        storageOfStores.set(store, object); // and save to storageOfStores array\n        return object; // return raised object with T type (from generic)\n    }\n    return objectStore; // if it had been already exist\n}\n/**\n * subStore creating\n */\nexport function subStore(object) {\n    return raise(object);\n}\n/**\n * Add function to laterAwaiter array (for a later call)\n */\nexport function later(callback) {\n    if (typeof localStorage == 'undefined') { // isServer\n        return new Promise((resolve, reject) => {\n            laterAwaiter.push(() => {\n                resolve(callback());\n            });\n        });\n    }\n    return callback();\n}\n", "import Record1 from './dist/ts/Record.js'\r\nimport { settings, callPattern, extendsPattern, setDefaultHeader, setDefaultAuth, setRequestFailure } from './dist/ts/config.js'\r\n\r\nexport const SetDefaultHeader = setDefaultHeader\r\nexport const SetDefaultAuth = setDefaultAuth\r\nexport const SetRequestFailure = setRequestFailure\r\nexport const ExtendsPattern = extendsPattern\r\nexport const CallPattern = callPattern\r\nexport const RegisterTemplate = settings.template\r\nexport const Record = Record1\r\nexport * from './dist/ts/index.js'\r\nexport class IStore {}\r\nexport { toRefRaw } from './dist/ts/Utils.js'"],
  "mappings": "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",
  "names": ["isRef", "options", "ETagPlace", "EParamsTagsType", "ESwapMethod", "isRef", "condition", "options", "isClient", "target", "Record"]
}
